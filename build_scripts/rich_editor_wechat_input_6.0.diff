diff --git a/frameworks/core/common/ime/text_editing_value.cpp b/frameworks/core/common/ime/text_editing_value.cpp
index 3a178e10e6a..a1e3610adf6 100644
--- a/frameworks/core/common/ime/text_editing_value.cpp
+++ b/frameworks/core/common/ime/text_editing_value.cpp
@@ -31,6 +31,10 @@ const char APPEND_TEXT[] = "appendText";
 #if defined(IOS_PLATFORM)
 const char UNMARK_TEXT[] = "unmarkText";
 #endif
+#if defined(ANDROID_PLATFORM)
+const char COMPOSING_START[] = "composingStart";
+const char COMPOSING_END[] = "composingEnd";
+#endif
 
 } // namespace
 
@@ -42,6 +46,9 @@ void TextEditingValue::ParseFromJson(const JsonValue& json)
     appendText = json.GetString(APPEND_TEXT);
 #if defined(IOS_PLATFORM)
     unmarkText = json.GetBool(UNMARK_TEXT);
+#endif
+#if defined(ANDROID_PLATFORM)
+    compose.Update(json.GetInt(COMPOSING_START, -1), json.GetInt(COMPOSING_END, -1));
 #endif
     selection.baseOffset = json.GetInt(SELECTION_START, -1);
     selection.extentOffset = json.GetInt(SELECTION_END, -1);
diff --git a/frameworks/core/common/ime/text_editing_value.h b/frameworks/core/common/ime/text_editing_value.h
index 974509b47aa..7e7b9c16066 100644
--- a/frameworks/core/common/ime/text_editing_value.h
+++ b/frameworks/core/common/ime/text_editing_value.h
@@ -21,7 +21,7 @@
 
 #include "core/common/ime/text_selection.h"
 
-#if defined(IOS_PLATFORM)
+#if defined(CROSS_PLATFORM)
 #include "core/common/ime/text_compose.h"
 #endif
 
@@ -80,7 +80,7 @@ struct TextEditingValue {
     bool isDelete;
     std::string appendText;
 
-#if defined(IOS_PLATFORM)
+#if defined(CROSS_PLATFORM)
     TextCompose compose;
     bool unmarkText;
 #endif
diff --git a/frameworks/core/components_ng/pattern/rich_editor/rich_editor_pattern.cpp b/frameworks/core/components_ng/pattern/rich_editor/rich_editor_pattern.cpp
index 1473b839e88..16a36fcdb73 100644
--- a/frameworks/core/components_ng/pattern/rich_editor/rich_editor_pattern.cpp
+++ b/frameworks/core/components_ng/pattern/rich_editor/rich_editor_pattern.cpp
@@ -378,6 +378,16 @@ void RichEditorPattern::InsertValueInStyledString(
 {
     CHECK_NULL_VOID(styledString_);
     IF_TRUE(shouldCommitInput && previewTextRecord_.IsValid(), FinishTextPreviewInner());
+#if defined(CROSS_PLATFORM)
+    if (editingValue_ && editingValue_->compose.IsValid() &&
+        (editingValue_->compose.GetEnd() > editingValue_->compose.GetStart()) &&
+        (!insertValue.empty() || editingValue_->unmarkText)) {
+        auto deleteLength = editingValue_->compose.GetEnd() - editingValue_->compose.GetStart();
+        DeleteValueInStyledString(editingValue_->compose.GetStart(), deleteLength);
+        editingValue_->compose.Update(-1);
+    }
+#endif
+
     int32_t changeStart = caretPosition_;
     int32_t changeLength = 0;
     if (textSelector_.IsValid()) {
@@ -5066,13 +5076,26 @@ void RichEditorPattern::UpdateEditingValue(const std::shared_ptr<TextEditingValu
     InsertValue(UtfUtils::Str8ToStr16(value->text), true);
 #else
     if (value->isDelete) {
+#ifdef IOS_PLATFORM
+        if (value->compose.IsValid()) {
+            EmojiRelation relation = GetEmojiRelation(value->selection.GetEnd());
+            if (relation == EmojiRelation::IN_EMOJI || relation == EmojiRelation::MIDDLE_EMOJI ||
+                relation == EmojiRelation::BEFORE_EMOJI || value->selection.GetEnd() != value->compose.GetStart()) {
+                HandleOnDelete(true);
+            } else {
+                DeleteBackward(value->compose.GetEnd() - value->compose.GetStart(), TextChangeReason::INPUT);
+                value->compose.Update(-1);
+            }
+        } else {
+            HandleOnDelete(true);
+        }
+#else
         HandleOnDelete(true);
+#endif
+
     } else {
 #ifdef CROSS_PLATFORM
-#ifdef IOS_PLATFORM
-        compose_ = value->compose;
-        unmarkText_ = value->unmarkText;
-#endif
+        editingValue_ = value;
 #ifdef ANDROID_PLATFORM
         if (value->appendText.empty()) {
             return;
@@ -5565,6 +5588,19 @@ void RichEditorPattern::UpdateCaretInfoToController()
     for (auto iter = spans_.begin(); iter != spans_.end(); iter++) {
         text += (*iter)->content;
     }
+#if defined(CROSS_PLATFORM)
+#if defined(IOS_PLATFORM)
+    if (editingValue_ && editingValue_->selection.IsValid() && editingValue_->selection.GetEnd() < caretPosition_) {
+#else
+    if (editingValue_ && editingValue_->selection.IsValid() &&
+        editingValue_->selection.GetEnd() < caretPosition_ && !editingValue_->appendText.empty()) {
+#endif
+        SetCaretPosition(editingValue_->selection.GetEnd());
+    }
+    if (editingValue_ && editingValue_->selection.IsValid()) {
+        editingValue_->selection.Update(-1);
+    }
+#endif
     auto start = textSelector_.IsValid() ? textSelector_.GetTextStart() : caretPosition_;
     auto end = textSelector_.IsValid() ? textSelector_.GetTextEnd() : caretPosition_;
 #if defined(ENABLE_STANDARD_INPUT)
@@ -6040,10 +6076,11 @@ void RichEditorPattern::InsertValueByOperationType(const std::u16string& insertV
 bool RichEditorPattern::ProcessTextTruncationOperation(std::u16string& text, bool shouldCommitInput)
 {
 #if defined(IOS_PLATFORM)
-    if (compose_.IsValid()) {
+    if (editingValue_ && editingValue_->compose.IsValid()) {
         return true;
     }
-    if (GetTextContentLength() - text.length() < maxLength_.value_or(INT_MAX) && text.length() == 1 && !unmarkText_) {
+    if (GetTextContentLength() - text.length() < maxLength_.value_or(INT_MAX) && text.length() == 1 &&
+        !editingValue_->unmarkText) {
         return true;
     }
 #endif
@@ -6098,9 +6135,12 @@ void RichEditorPattern::ProcessInsertValueMore(const std::u16string& text, Opera
         return;
     }
     ClearRedoOperationRecords();
-#if defined(IOS_PLATFORM)
-    if (compose_.IsValid() && (record.addText.value_or(u"").length() > 0 || unmarkText_)) {
-        DeleteByRange(&record, compose_.GetStart(), compose_.GetEnd());
+#if defined(CROSS_PLATFORM)
+    if (editingValue_ && editingValue_->compose.IsValid() &&
+        (editingValue_->compose.GetEnd() > editingValue_->compose.GetStart()) &&
+        (record.addText.value_or(u"").length() > 0 || editingValue_->unmarkText)) {
+        DeleteByRange(&record, editingValue_->compose.GetStart(), editingValue_->compose.GetEnd());
+        editingValue_->compose.Update(-1);
     }
 #endif
     InsertValueOperation(text, &record, operationType, shouldCommitInput);
@@ -6158,8 +6198,10 @@ void RichEditorPattern::ProcessInsertValue(const std::u16string& insertValue, Op
         previewInputRecord_.Reset();
         undoManager_->ClearPreviewInputRecord();
 #if defined(IOS_PLATFORM)
-        if (compose_.IsValid() && (record.addText.value_or(u"").length() > 0 || unmarkText_)) {
-            DeleteByRange(&record, compose_.GetStart(), compose_.GetEnd());
+        if (editingValue_ && editingValue_->compose.IsValid() && (record.addText.value_or(u"").length() > 0 ||
+            editingValue_->unmarkText)) {
+            DeleteByRange(&record, editingValue_->compose.GetStart(), editingValue_->compose.GetEnd());
+            editingValue_->compose.Update(-1);
         }
 #endif
         return;
diff --git a/frameworks/core/components_ng/pattern/rich_editor/rich_editor_pattern.h b/frameworks/core/components_ng/pattern/rich_editor/rich_editor_pattern.h
index d54a5e3c686..0fc3cff90a8 100644
--- a/frameworks/core/components_ng/pattern/rich_editor/rich_editor_pattern.h
+++ b/frameworks/core/components_ng/pattern/rich_editor/rich_editor_pattern.h
@@ -1942,10 +1942,9 @@ private:
     // record caret bottom position relative to window when keyboard avoid
     std::optional<float> lastCaretPos_ = std::nullopt;
     int32_t touchedFingerCount_ = 0;
-#if defined(IOS_PLATFORM)
-    TextCompose compose_;
-    bool unmarkText_;
-#endif    
+#if defined(CROSS_PLATFORM)
+    std::shared_ptr<TextEditingValue> editingValue_;
+#endif
 };
 } // namespace OHOS::Ace::NG
 
